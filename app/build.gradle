apply plugin: 'com.android.application'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'io.fabric'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'

apply from: 'version.gradle'

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.13.0'
        classpath 'io.fabric.tools:gradle:1.22.0'
        classpath 'me.tatarka:gradle-retrolambda:3.3.0'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    }
}

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.2"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 24

        versionCode appVersion
        versionName "1.${(int) (appVersion / 10)}.${(int) (appVersion % 10)}"

        resConfigs "en", "de"

        // vectorDrawables.useSupportLibrary = true

        ndk {
            abiFilters "x86", "x86_64", "armeabi", "armeabi-v7a", "arm64-v8a"
        }

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    aaptOptions {
        // See https://www.reddit.com/r/androiddev/comments/47ni7v/if_you_support_older_versions_of_android_there_is/
        additionalParameters "--no-version-vectors"
        cruncherEnabled = false
    }

    sourceSets.main {
        jni.srcDirs = []
        jniLibs.srcDir 'src/main/libs'
    }

    signingConfigs {
        open {
            storeFile file("../release.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        debug {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            versionNameSuffix ".dev"
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules-release.pro'
        }
    }

    productFlavors {
        open {
            applicationId "com.pr0gramm.app"
            signingConfig signingConfigs.open
        }
    }

    lintOptions {
        checkReleaseBuilds false
    }

    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.dagger/dagger/pom.xml'
        exclude 'META-INF/maven/com.google.dagger/dagger/pom.properties'
    }
}

android.applicationVariants.all { variant ->
    variant.mergeResources.doLast {
        def filesToDelete = fileTree(variant.mergeResources.outputDir) {
            // remove timezone data
            include "raw/joda_*"
            exclude "raw/joda_etc_utc"
            exclude "raw/joda_europe_berlin"
            exclude "raw/joda_europe_zurich"
            exclude "raw/joda_zoneinfomap"

            // remove left-to-right drawables
            include "drawable-ldrtl-*/*"
        }

        filesToDelete.each { it.delete() }
    }

    // delete .so-files we dont want in the finished build
    tasks."merge${variant.name.capitalize()}JniLibFolders".doLast {
        def filesToDelete = fileTree("build/") {
            include "**/armeabi/libpl_droidsonroids_gif.so"
            include "**/mips*/*.so"
        }

        filesToDelete.each { it.delete() }
    }
}

retrolambda {
    incremental true
}

apply from: "dependencies.gradle"
